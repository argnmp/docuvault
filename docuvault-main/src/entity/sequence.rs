//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "sequence")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    pub docuser_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::docuser::Entity",
        from = "Column::DocuserId",
        to = "super::docuser::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Docuser,
}

impl Related<super::docuser::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Docuser.def()
    }
}

impl Related<super::docorg::Entity> for Entity {
    fn to() -> RelationDef {
        super::docorg_sequence::Relation::Docorg.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::docorg_sequence::Relation::Sequence.def().rev())
    }
}

impl Related<super::scope::Entity> for Entity {
    fn to() -> RelationDef {
        super::scope_sequence::Relation::Scope.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::scope_sequence::Relation::Sequence.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
